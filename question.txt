I'm stumped!

I want the user to be able to sort the output dates (which are strings) in both ascending and descending order by clicking the relevant button.

In addition, I want any reordering to be saved to and retrievable from local storage.

** Button HTML **

```HTML
<div class="sort-buttons">
    <!-- <button data-button-sort-asc class="sort-button" disabled> -->
    <button data-button-sort-asc class="sort-button">
        <span class="visually-hidden">Sort date: oldest first</span>
        <svg role="img" class="icon-sort">
            <use href="./img/sprite.svg#icon-asc"></use>
        </svg>
    </button>
    <!-- <button data-button-sort-desc class="sort-button" disabled> -->
    <button data-button-sort-desc class="sort-button" disabled>
        <span class="visually-hidden">Sort date: most recent first</span>
        <svg role="img" class="icon-sort">
            <use href="./img/sprite.svg#icon-desc"></use>
        </svg>
    </button>
</div>
```

** Button JavaScript **

```JavaScript
  /** Sort dates */
  // Sort date oldest first (ascending) - normal output
  const btnSortDatesAsc = document.querySelector("[data-button-sort-asc]")
  btnSortDatesAsc.addEventListener("click", (e) => {
    entries.sort((a, b) => {
      // ?
    })
  })

  // Sort date most recent first (descending)
  const btnSortDatesDesc = document.querySelector("[data-button-sort-desc]")
  btnSortDatesDesc.addEventListener("click", (e) => {
    entries.sort((a, b) => {
      // ?
    })
  })
```

Here's the full code:

```HTML
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/svg+xml" href="./favicon.svg">
    <meta name="description" content="Lorem ipsum dolor sit amet." />

    <title>V2-1 Costs Calculator</title>
    <link rel="stylesheet" href="./css/index.css">
    <script type="module" src="./js/index.js"></script>

</head>

<body id="top">
    <div id="loader" class="loader"><span class="visually-hidden">The page is loading...</span></div>
    <p class="visually-hidden" aria-hidden="true" id="page-loaded"></p>
    <a href="#main-content" class="element-invisible element-focusable skip-link">Skip to main content</a>
    <form id="theme-picker" class="theme-picker">
        <button type="button" id="btn-theme-toggle" class="btn-theme-toggle" aria-pressed>
            <svg role="img" class="theme-icon" id="theme-darkmode">
                <use href="./img/sprite.svg#moon"></use>
            </svg>
            <svg role="img" class="theme-icon hide" id="theme-lightmode">
                <use href="./img/sprite.svg#sun"></use>
            </svg>
            <span>Dark Mode:</span> <span id="mode" class="mode"></span>
            <span class="btn-theme-state" aria-hidden="true"></span>
        </button>
    </form>
    <div class="page-layout">
        <header class="page-header">
            <svg role="img" class="icon-logo">
                <use href="./img/sprite.svg#icon-logo"></use>
            </svg>
            <h1>V2-1 Costs Calculator</h1>
            <form class="currency-selector">
                <label for="currency-select">Choose currency:</label>
                <select id="currency-select" name="currency-select">
                    <option value="GBP">GBP</option>
                    <option value="EUR">EUR</option>
                    <option value="USD">USD</option>
                    <option value="AUD">AUD</option>
                    <option value="JPY">JPY</option>
                    <option value="CNY">CNY</option>
                    <option value="INR">INR</option>
                </select>
            </form>
            <p>Record your daily spend and see the average over a number of days.</p>
        </header>
        <main class="main" id="main-content">
            <form id="costs-form" class="costs-form">
                <div>
                    <label for="date">Date <span class="required">*</span></label>
                    <input type="date" name="date" id="date" required data-input-date />
                </div>
                <div>
                    <label for="items">Item(s)</label>
                    <input type="text" id="items" data-input-items value="Shopping" />
                </div>
                <fieldset>
                    <legend class="sr-only">Daily spend</legend>
                    <div class="number">
                        <label for="pounds"><span data-selected-currency class="currency-symbol">&pound;</span></label>
                        <input type="number" name="pounds" id="pounds" class="input-number" data-input-pounds
                            data-input-number min="0" value="0" />
                    </div>
                    <div class="number">
                        <label for="pence">.<span class="sr-only"> Pence</span></label>
                        <input type="number" name="pence" id="pence" class="input-number" data-input-pence
                            data-input-number min="0" max="99" value="0" />
                    </div>
                </fieldset>

                <div>
                    <button class="submit-button">Submit</button>
                </div>
            </form>
            <div class="tables-wrapper">
                <div role="region" aria-labelledby="captionDailySpend" tabindex="0"
                    class="table-container results-table-container">
                    <table>
                        <caption id="captionDailySpend" class="sr-only">
                            Average spend
                        </caption>
                        <thead>
                            <tr class="table-headings">
                                <th>No. of days</th>
                                <th>
                                    Total (<span data-selected-currency class="currency-symbol">&pound;</span>)
                                </th>
                                <th>
                                    Average (<span data-selected-currency class="currency-symbol">&pound;</span>)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td data-total-days>0</td>
                                <td>
                                    <span data-total-costs>0.00</span>
                                </td>
                                <td>
                                    <span data-average-spend>0.00</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div role="region" aria-labelledby="captionEntries" tabindex="0"
                    class="table-container costs-table-container">
                    <table id="costs-table">
                        <caption id="captionEntries" class="sr-only">
                            Daily spend
                        </caption>
                        <thead class="sticky">
                            <tr data-table-headings class="table-headings">
                                <th>
                                    <div class="date">
                                        <div class="date-heading">Date</div>
                                        <div class="sort-buttons">
                                            <!-- <button data-button-sort-asc class="sort-button" disabled> -->
                                            <button data-button-sort-asc class="sort-button">
                                                <span class="visually-hidden">Sort date: oldest first</span>
                                                <svg role="img" class="icon-sort">
                                                    <use href="./img/sprite.svg#icon-asc"></use>
                                                </svg>
                                            </button>
                                            <!-- <button data-button-sort-desc class="sort-button" disabled> -->
                                            <button data-button-sort-desc class="sort-button" disabled>
                                                <span class="visually-hidden">Sort date: most recent first</span>
                                                <svg role="img" class="icon-sort">
                                                    <use href="./img/sprite.svg#icon-desc"></use>
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                </th>
                                <th>
                                    Spend (<span data-selected-currency class="currency-symbol">&pound;</span>)
                                </th>
                                <th>Item(s)</th>
                                <th>
                                    <div class="delete">
                                        <span class="sr-only">Delete</span>
                                        <svg role="img" class="icon-delete">
                                            <use href="./img/sprite.svg#icon-delete"></use>
                                        </svg>
                                    </div>
                                </th>
                            </tr>
                        </thead>
                        <tbody data-rows class="tbody"></tbody>
                    </table>
                    <!-- TEMP - DEV ONLY: Delete all entries and reset-->
                    <!-- TEMP - DEV ONLY: Delete all entries and reset-->
                    <form class="delete-all-entries"
                        style="width: -moz-fit-content; width: fit-content;margin: 30px 0 30px auto; border: 2px solid green;padding: 10px 20px;border-radius: 8px;">
                        <button id="delete-all-entries">TEMP - DEV ONLY: Delete all entries
                            and reset
                            currency to GBP</button>
                    </form>
                    <!-- TEMP - DEV ONLY: Delete all entries and reset-->
                    <!-- TEMP - DEV ONLY: Delete all entries and reset-->
                </div>
            </div>
            <template id="costs-template">
                <tr class="costs-row">
                    <td data-date></td>
                    <td>
                        <span class="daily-cost"><span data-daily-cost>0.00</span></span>
                    </td>
                    <td>
                        <div class="items-container">
                            <span data-item-type>Shopping</span>
                            <button data-button-type-edit>Edit</button>
                        </div>
                    </td>
                    <td>
                        <button data-button-delete class="remove-button">Delete</button>
                    </td>
                </tr>
            </template>
        </main>
        <footer class="page-footer">
            <ul role="list">
                <li><a href="https://github.com/chrisnajman/costs-calculator-v2" target="_blank"
                        rel="noopener noreferrer">GitHub
                        Repository</a></li>
            </ul>
        </footer>
    </div>

    <script>
        // TEMP - DEV ONLY
        const deleteAllEntries = document.getElementById("delete-all-entries")
        deleteAllEntries.addEventListener("click", () => {


            if (window.confirm("Do you really want to delete all entries (and reset currency to GBP)?")) {
                window.localStorage.clear()
                // window.location.reload()
            }


            // if (!window.confirm) return
            // window.localStorage.clear();
            // window.location.reload();
        })
    </script>
</body>

</html>
```

```JavaScript

// index.js
// --------------------
import costsCalculator from "./costs-calculator.js"

costsCalculator()

// costs-calculator.js
// --------------------
export default function costsCalculator() {
  /** Costs form selectors */
  const costsForm = document.getElementById("costs-form")
  const inputDate = document.querySelector("[data-input-date]")
  const inputItem = document.querySelector("[data-input-items]")
  const inputPounds = document.querySelector("[data-input-pounds]")
  const inputPence = document.querySelector("[data-input-pence]")

  /** Costs Local Storage */
  const LOCAL_STORAGE_PREFIX = "COSTS_v2_GH"
  const COSTS_STORAGE_KEY = `${LOCAL_STORAGE_PREFIX}-data`

  /** Currency selectors */
  const currencySelect = document.getElementById("currency-select")
  const selectedCurrency = document.querySelectorAll("[data-selected-currency]")
  const gbp = "\u00A3",
    eur = "\u20AC",
    usd = "\u0024",
    aud = "\u0024",
    jpy = "\u00A5",
    cny = "\u5143",
    inr = "\u20A8"

  /** Currency Local Storage */
  const LOCAL_STORAGE_PREFIX2 = "CURRENCY-GH"
  const CURRENCY_STORAGE_KEY = `${LOCAL_STORAGE_PREFIX2}-data`

  /** Table selectors */
  const tbodyRows = document.querySelector("[data-rows]")
  const totalDays = document.querySelector("[data-total-days]")
  const totalCosts = document.querySelector("[data-total-costs]")
  const averageSpend = document.querySelector("[data-average-spend]")
  /* tr template */
  const costsTemplate = document.getElementById("costs-template")

  costsForm.addEventListener("submit", (e) => {
    e.preventDefault()

    // Items bought, default value is "Shopping"
    const itemValue = inputItem.value

    const dateValue = inputDate.value
    // console.log("Date input value " + dateValue)
    const dateArray = dateValue.split("-")
    // console.log("Date array " + dateArray)
    const dateString = dateArray.reverse().join("/")
    // console.log("Date string " + dateString)

    const gbp = "\u00A3"
    if (inputPounds.value === "") {
      alert(`Enter 0 or greater in the ${gbp} field`)
      return
    }
    if (inputPence.value === "") {
      alert("Enter a number between 0 and 99 in the Pence field")
      return
    }

    const poundsValue = parseInt(inputPounds.value) * 100
    const penceValue = parseInt(inputPence.value)
    const poundsPlusPence = (poundsValue + penceValue) / 100

    const newCostsEntry = {
      date: dateString,
      item: itemValue,
      poundsPlusPence: poundsPlusPence,
      id: new Date().valueOf().toString(),
    }
    entries.push(newCostsEntry)
    renderCostsEntry(newCostsEntry)

    saveentries()

    inputDate.value = ""
    inputItem.value = "Shopping"
    inputPounds.value = 0
    inputPence.value = 0
  })

  const dailyCostsAll = []
  function renderCostsEntry(entry) {
    const templateClone = costsTemplate.content.cloneNode(true)
    const costsRow = templateClone.querySelector(".costs-row")

    costsRow.dataset.entryId = entry.id

    const date = templateClone.querySelector("[data-date]")
    const itemsType = templateClone.querySelector("[data-item-type]")
    const dailyCost = templateClone.querySelector("[data-daily-cost]")

    date.textContent = entry.date
    dailyCost.textContent = entry.poundsPlusPence.toFixed(2)

    itemsType.textContent = entry.item

    const totalRows = parseInt(tbodyRows.rows.length + 1)
    totalDays.textContent = totalRows

    dailyCostsAll.push(parseFloat(dailyCost.textContent))
    const costsReduce = dailyCostsAll.reduce((total, cost) => {
      return total + cost
    }, 0)
    totalCosts.textContent = costsReduce.toFixed(2)

    const totalCostsNum = parseFloat(totalCosts.textContent)
    averageSpend.textContent = (totalCostsNum / totalRows).toFixed(2)

    tbodyRows.appendChild(templateClone)
  }

  let entries = loadentries()
  entries.forEach((entry) => renderCostsEntry(entry))

  function saveentries() {
    localStorage.setItem(COSTS_STORAGE_KEY, JSON.stringify(entries))
  }
  function loadentries() {
    const entriesString = localStorage.getItem(COSTS_STORAGE_KEY)
    return JSON.parse(entriesString) || []
  }

  /** Event listeners */
  // Delete button
  addGlobalEventListener("click", "[data-button-delete]", (e) => {
    // Remove from the screen
    const parent = e.target.closest(".costs-row")
    parent.remove()

    // Remove from local storage
    const entryId = parent.dataset.entryId
    entries = entries.filter((entry) => {
      return entry.id !== entryId
    })

    saveentries()
    window.location.reload()
  })

  // Clear number fields on focus(in)
  addGlobalEventListener(
    "focusin",
    "[data-input-number]",
    (e) => {
      e.target.value = ""
    },
    true
  )

  /** Currency select */
  // Load saved currency and selection from localStorage
  // GBP is default value
  const storedCurrency = localStorage.getItem(CURRENCY_STORAGE_KEY) || "GBP"
  currencySelect.value = storedCurrency
  updateSelectedCurrency(storedCurrency)

  currencySelect.addEventListener("change", (e) => {
    const selectedValue = e.target.value
    updateSelectedCurrency(selectedValue)
    // Save selected currency to localStorage
    localStorage.setItem(CURRENCY_STORAGE_KEY, selectedValue)
  })

  function updateSelectedCurrency(currencySymbol) {
    selectedCurrency.forEach((currency) => {
      switch (currencySymbol) {
        case "GBP":
          currency.textContent = `${gbp}`
          break
        case "EUR":
          currency.textContent = `${eur}`
          break
        case "USD":
          currency.textContent = `${usd}`
          break
        case "AUD":
          currency.textContent = `${aud}`
          break
        case "JPY":
          currency.textContent = `${jpy}`
          break
        case "CNY":
          currency.textContent = `${cny}`
          break
        case "INR":
          currency.textContent = `${inr}`
          break
        default:
        // Do nothing.
      }
    })
  }

  /** Edit items */
  addGlobalEventListener("click", "[data-button-type-edit]", (e) => {
    e.target.textContent =
      e.target.textContent === "Edit" ? "Save edit" : "Edit"
    const parent = e.target.closest(".costs-row")

    const text = parent.querySelector("[data-item-type]")
    text.toggleAttribute("contenteditable")

    const entryId = parent.dataset.entryId
    // console.log(entryId)
    const entry = entries.find((ent) => {
      return ent.id === entryId
    })

    entry.edited = !text.hasAttribute("contenteditable")
    if (entry.edited) entry.item = text.textContent

    localStorage.setItem(COSTS_STORAGE_KEY, JSON.stringify(entries))
  })

  /** Sort dates */
  // Sort date oldest first (ascending) - normal output
  const btnSortDatesAsc = document.querySelector("[data-button-sort-asc]")
  btnSortDatesAsc.addEventListener("click", (e) => {
    entries.sort((a, b) => {
      // ?
    })
  })

  // Sort date most recent first (descending)
  const btnSortDatesDesc = document.querySelector("[data-button-sort-desc]")
  btnSortDatesDesc.addEventListener("click", (e) => {
    entries.sort((a, b) => {
      // ?
    })
  })

  /** Helper functions */
  function addGlobalEventListener(type, selector, callback, option = false) {
    document.addEventListener(
      type,
      (e) => {
        if (e.target.matches(selector)) callback(e)
      },
      option
    )
  }
}

```
